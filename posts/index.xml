<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Posts on Savitha's Blog</title><link>https://gsavitha.in/posts/</link><description>Recent content in Posts on Savitha's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>gsavitha@protonmail.com (Savitha Gollamudi)</managingEditor><webMaster>gsavitha@protonmail.com (Savitha Gollamudi)</webMaster><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Sat, 01 Apr 2023 22:07:21 +0530</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://gsavitha.in/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>How to enable dark theme in css</title><link>https://gsavitha.in/posts/css-theme-change/</link><pubDate>Sat, 01 Apr 2023 22:07:21 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Sat, 01 Apr 2023 22:07:21 +0530</atom:modified><guid>https://gsavitha.in/posts/css-theme-change/</guid><description>Dark mode in your website You can create a toggle for dark and light theme in CSS by using a combination of CSS variables, media queries, and JavaScript
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /* defining color variables (globally) in css */ :root{ --bg-color : white; --text-color : black; /*These names are generalised to avoid confusion*/ --theme-bg-color : black; --theme-text-color: white } /* light mode styles */ body{ background-color : var(--bg-color); color : var(--text-color); } /* This will apply the dark mode styles when the user&amp;#39;s device is set to use a dark color scheme.</description><dc:creator>Savitha Gollamudi</dc:creator><category>css</category><category>snippets</category><category>css</category><category>snippets</category></item><item><title>Fixing Your Footer Position with Flexbox</title><link>https://gsavitha.in/posts/footer/</link><pubDate>Mon, 27 Mar 2023 14:09:27 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Mon, 27 Mar 2023 14:09:27 +0530</atom:modified><guid>https://gsavitha.in/posts/footer/</guid><description>If you want to fix the position of your footer at the center bottom of your webpage using flexbox layout, you can use the following code:
1 2 3 4 5 6 7 8 9 10 11 &amp;lt;body&amp;gt; &amp;lt;header class=&amp;#34;header&amp;#34;&amp;gt; &amp;lt;!-- header content here --&amp;gt; &amp;lt;/header&amp;gt; &amp;lt;main class=&amp;#34;main&amp;#34;&amp;gt; &amp;lt;!-- main content here --&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;footer class=&amp;#34;footer&amp;#34;&amp;gt; &amp;lt;!-- footer content here --&amp;gt; &amp;lt;/footer&amp;gt; &amp;lt;/body&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 html, body { height: 100%; } body { display: flex; flex-direction: column; } .</description><dc:creator>Savitha Gollamudi</dc:creator><category>css</category><category>snippets</category><category>css</category><category>snippets</category></item><item><title>Feature Queries in Web Development</title><link>https://gsavitha.in/posts/feature-quries/</link><pubDate>Mon, 27 Mar 2023 13:26:46 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Mon, 27 Mar 2023 13:26:46 +0530</atom:modified><guid>https://gsavitha.in/posts/feature-quries/</guid><description>What are feature queries? Feature queries are a set of conditional statements that check whether a particular feature is supported by a browser or not. These queries are used to control the behavior of a website by providing fallbacks or alternative styles for browsers that do not support certain features.
For example, let&amp;rsquo;s say you want to use the CSS Grid layout in your website. However, not all browsers support CSS Grid.</description><dc:creator>Savitha Gollamudi</dc:creator><category>css</category><category>javascript</category><category>legacy</category><category>css</category><category>javascript</category></item><item><title>Execution Context Demystified</title><link>https://gsavitha.in/posts/exec-context/</link><pubDate>Sat, 25 Mar 2023 14:14:58 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Sat, 25 Mar 2023 14:14:58 +0530</atom:modified><guid>https://gsavitha.in/posts/exec-context/</guid><description>Greetings! 👋,
Welcome to the first part of the JS Hard Parts: Demystified series. In this post, we will delve into the concepts of callbacks, execution context, functions, and higher-order functions. So let&amp;rsquo;s get started without any delay 🚀
Before we proceed, I assume that you already have knowledge of writing loops, functions, and call stack
Functions, callbacks and execution context Let&amp;rsquo;s take an example to understand the concepts better. We have a function called copyArrayAndMultiplyBy2 that accepts an array, multiplies each element of the array by 2, and returns the new array.</description><dc:creator>Savitha Gollamudi</dc:creator><category>javascript</category><category>HOF</category><category>Higher Order Functions</category><category>execution context</category><category>demystified</category><category>javascript</category><category>JS Hard Parts</category></item><item><title>JS Hard Parts Demystified: Introduction</title><link>https://gsavitha.in/posts/js-hard-parts/</link><pubDate>Thu, 23 Mar 2023 12:39:37 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Thu, 23 Mar 2023 12:39:37 +0530</atom:modified><guid>https://gsavitha.in/posts/js-hard-parts/</guid><description>Hello there! 👋
I&amp;rsquo;m excited to announce the start of a new series on Javascript that aims to provide a deeper understanding of core concepts. Let&amp;rsquo;s dive right in without delay! 🚀
This series will cover the following topics:
Execution Context, Callbacks, and Higher-Order Functions : This topic will cover the fundamental concepts of the execution context in JavaScript, how callbacks are used in higher-order functions, and why they are essential in modern web development.</description><dc:creator>Savitha Gollamudi</dc:creator><category>javascript</category><category>foundations</category><category>demystified</category><category>javascript</category><category>JS Hard Parts</category></item><item><title>React Fundamentals: Understanding JSX</title><link>https://gsavitha.in/posts/understanding-jsx/</link><pubDate>Wed, 19 May 2021 12:47:25 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Wed, 19 May 2021 12:47:25 +0530</atom:modified><guid>https://gsavitha.in/posts/understanding-jsx/</guid><description>Hey, there 👋
Welcome to the 3rd article of the Epic React Series which is based on the workshop EpicReact.dev by Kent C. Dodds. If you haven&amp;rsquo;t read the previous article of this series, I recommend you to go read it first before proceeding further.
JS Fundamentals for React Intro to Raw React APIs In the previous article we understood about raw react APIs, especially React.createElement() and ReactDOM.render(). In this article, lets understand what is JSX and its significance.</description><dc:creator>Savitha Gollamudi</dc:creator><category>javascript</category><category>react</category><category>react</category><category>Epic React</category></item><item><title>React Fundamentals: Intro to Raw React APIs</title><link>https://gsavitha.in/posts/intro-to-raw-react-apis/</link><pubDate>Wed, 12 May 2021 14:35:48 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Wed, 12 May 2021 14:35:48 +0530</atom:modified><guid>https://gsavitha.in/posts/intro-to-raw-react-apis/</guid><description>Hey, there 👋
Welcome to the 2nd article of the Epic React Series which is based on the workshop EpicReact.dev by Kent C. Dodds. If you haven&amp;rsquo;t read previous article of the series, I recommend you to go and read it first before proceeding further.
JS Fundamentals required to get started with React In this post you are going to learn the very basics of react with HTML and javascript using raw React APIs.</description><dc:creator>Savitha Gollamudi</dc:creator><category>javascript</category><category>react</category><category>react</category><category>Epic React</category></item><item><title>Async and Await</title><link>https://gsavitha.in/posts/async-await/</link><pubDate>Wed, 12 May 2021 12:58:09 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Wed, 12 May 2021 12:58:09 +0530</atom:modified><guid>https://gsavitha.in/posts/async-await/</guid><description>Before getting started you need to know..
How Asynchronous code works in JS What are promises and how they work Introduction To work with async functions, we need to use callbacks or promises. Async and await makes our work easier and cleaner with promises and create synchronous looking asynchronous code
The async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.</description><dc:creator>Savitha Gollamudi</dc:creator><category>javascript</category><category>async</category><category>javascript</category></item><item><title>Asynchronous Code in Javascript</title><link>https://gsavitha.in/posts/async-code-in-js/</link><pubDate>Wed, 12 May 2021 12:09:58 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Wed, 12 May 2021 12:09:58 +0530</atom:modified><guid>https://gsavitha.in/posts/async-code-in-js/</guid><description>Hey there 👋,
Before diving into the world of asynchronous events, lets first understand what happens when you execute a function? where do they get stored in memory? How does the interpreter knows the order of the functions to be executed? Can we run multiple functions at a time?
Without making any further delay, lets get started&amp;hellip;
The call stack The mechanism JS interpreter uses to keep track of its place in a script that calls multiple functions.</description><dc:creator>Savitha Gollamudi</dc:creator><category>javascript</category><category>async</category><category>javascript</category></item><item><title>Promises Explained</title><link>https://gsavitha.in/posts/promises-explained/</link><pubDate>Wed, 12 May 2021 05:30:10 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Wed, 12 May 2021 05:30:10 +0530</atom:modified><guid>https://gsavitha.in/posts/promises-explained/</guid><description>Promises are one of the important concepts in javascript one should be familiar with.
Pre-requisite: Before going into promises you need to understand what is asynchronous code, how it works, what are callbacks and why are promises introduced.
Checkout Asynchronous Code in JavaScript
Once you understand that, without making any further delay lets get started..
Intro to Promises A promise is an object representing the eventual completion(usually which takes time) or failure of an asynchronous operation.</description><dc:creator>Savitha Gollamudi</dc:creator><category>javascript</category><category>async</category><category>javascript</category></item><item><title>JS fundamentals for React</title><link>https://gsavitha.in/posts/js-fundamentals-for-react/</link><pubDate>Mon, 10 May 2021 13:38:45 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Mon, 10 May 2021 13:38:45 +0530</atom:modified><guid>https://gsavitha.in/posts/js-fundamentals-for-react/</guid><description>Hey, there 👋
Welcome to the 1st article of the Epic React Series which is based on the workshop EpicReact.dev by Kent C. Dodds
In this article lets look at the basics of JS one should know before getting started with React. Feel free to skip the topics you already know.
Logical operators These operators are also known as short-circuit evaluation operators
Logical &amp;amp;&amp;amp; (AND) Let&amp;rsquo;s say you have two expressions x and y 1 x &amp;amp;&amp;amp; y; This operation will be executed if both x and y are truthy.</description><dc:creator>Savitha Gollamudi</dc:creator><category>javascript</category><category>react</category><category>react</category><category>Epic React</category></item><item><title>Epic React Series: Introduction</title><link>https://gsavitha.in/posts/epic-react-intro/</link><pubDate>Mon, 10 May 2021 12:45:39 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Mon, 10 May 2021 12:45:39 +0530</atom:modified><guid>https://gsavitha.in/posts/epic-react-intro/</guid><description>Hello world 👋
Today I decided to start a new series on react based on Kent C. Dodds&amp;rsquo;s EpicReact.dev workshop. While I go through the content of this workshop, I decided to share the knowledge I gain from it. Hope you enjoy this journey with me :)
The content of this workshop is self-paced and it is open source. But I recommended you to buy the course if you are a visual learner.</description><dc:creator>Savitha Gollamudi</dc:creator><category>javascript</category><category>react</category><category>react</category><category>Epic React</category></item><item><title>Remove All Your Facebook Likes</title><link>https://gsavitha.in/posts/remove-all-facebook-likes/</link><pubDate>Thu, 08 Apr 2021 21:50:19 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Thu, 08 Apr 2021 21:50:19 +0530</atom:modified><guid>https://gsavitha.in/posts/remove-all-facebook-likes/</guid><description>Recently came across an interesting code snippet from github gists.
1 2 3 4 5 6 7 8 setInterval(() =&amp;gt; { for (const Button of document.querySelectorAll( &amp;#39;div[aria-label=&amp;#34;Action options&amp;#34;]&amp;#39; )) { Button.click(); document.querySelector(&amp;#39;div[role=&amp;#34;menuitem&amp;#34;]&amp;#39;).click(); } }, 1000); Visit the below url and dont forget to replace with your FB username or userid.
https://www.facebook.com/{your_id_or_username}/allactivity/?category_key=LIKEDPOSTS&amp;amp;filter_hidden=ALL&amp;amp;filter_privacy=NONE
You can choose filter to choose year or month.
Once you are done with this, open console on your webpage (cmd+shift+J on mac or ctrl+shift+I on windows or linux) or just right click on the webpage choose Inspect Element then select Console and just paste the above snippet and hit Enter.</description><dc:creator>Savitha Gollamudi</dc:creator><category>gist</category><category>javascript</category><category>security</category><category>scripts</category><category>scripts</category><category>privacy</category></item><item><title>What is Micro Frontends?</title><link>https://gsavitha.in/posts/micro-frontends/</link><pubDate>Fri, 26 Mar 2021 14:45:17 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Fri, 26 Mar 2021 14:45:17 +0530</atom:modified><guid>https://gsavitha.in/posts/micro-frontends/</guid><description>Most of the web apps these days are having 90% of front end and only 10% of the backend. As the application grows bigger and bigger having a monolithic approach on front end doesn&amp;rsquo;t work. There needs to be a way to break this approach into smaller modules that can work independently.
Micro Frontends - A micro service approach to front end development.
What does it mean? Micro Frontends are loosely coupled components of UI that are developed by applying micro services principles on frontend.</description><dc:creator>Savitha Gollamudi</dc:creator><category>web-architecture</category><category>web-architecture</category></item><item><title>How to write base cases</title><link>https://gsavitha.in/posts/recursion-base-cases/</link><pubDate>Sat, 20 Feb 2021 15:46:57 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Sat, 20 Feb 2021 15:46:57 +0530</atom:modified><guid>https://gsavitha.in/posts/recursion-base-cases/</guid><description>This post requires knowledge of Recursion. If you are new here, its recommended to have a look at that post first.
Many times, when it comes to recursion, we can guess the recursive solution but it becomes difficult to understand how to write proper base cases so that everything is handled and we do not get stack overflow(incase of java) or segmentation fault(incase of cpp) errors.
What are base cases? Base cases are those inputs, for which we cannot further break down the problem into smaller sub problems.</description><dc:creator>Savitha Gollamudi</dc:creator><category>dsa</category><category>recursion</category><category>dsa</category></item><item><title>Recursion Simplified</title><link>https://gsavitha.in/posts/recursion-simplified/</link><pubDate>Sun, 31 Jan 2021 11:16:15 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Sun, 31 Jan 2021 11:16:15 +0530</atom:modified><guid>https://gsavitha.in/posts/recursion-simplified/</guid><description>What is recursion? Recursion : A function calling itself directly or indirectly.
Directly:
1 2 3 4 5 void fun1(){ //somecode ... fun1(); //some other code... } Indirectly: Not a very common approach (Mostly direct recursive approach is used)
fun1() -&amp;gt; fun2() -&amp;gt; fun1()
1 2 3 4 5 6 7 8 9 10 11 12 void fun1(){ //somecode ... fun2(); //some other code... } void fun2(){ //somecode .</description><dc:creator>Savitha Gollamudi</dc:creator><category>dsa</category><category>recursion</category><category>dsa</category></item><item><title>super() vs super(props)</title><link>https://gsavitha.in/posts/super-vs-super-props/</link><pubDate>Fri, 29 Jan 2021 17:52:28 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Fri, 29 Jan 2021 17:52:28 +0530</atom:modified><guid>https://gsavitha.in/posts/super-vs-super-props/</guid><description>TL;DR 🚀 If you want to use this.props inside constructor of derived class, use super(props).
While checking react code, you might have come across a line super(props), sometimes super(). Ever wondered what&amp;rsquo;s the difference between two?
Why do we need to pass props ? Do we always need to pass props ?
Consider the example below.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import React, { Component } from &amp;#34;react&amp;#34;; class Game extends Component { constructor(props) { super(props); this.</description><dc:creator>Savitha Gollamudi</dc:creator><category>react</category><category>react</category></item><item><title>Event Handling in JS</title><link>https://gsavitha.in/posts/event-handling-in-js/</link><pubDate>Sat, 26 Sep 2020 15:18:15 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Sat, 26 Sep 2020 15:18:15 +0530</atom:modified><guid>https://gsavitha.in/posts/event-handling-in-js/</guid><description>Intro to DOM Events Events - Responding to user inputs and actions
Types of events:(some of the many)
clicks, drags, drops, hovers,scrolls, form submissions, key press, focus/blur mousewheel, double click, copying, pasting, audio start, screen resize, printing etc. Note: All events follow a similar pattern
Pattern:
The thing Event type Code to run button click change the color input hits return get the search results image mouseover display img caption for more info visit MDN Event reference 2 ways not to add events Lets explore 2 different syntaxes which we should not use.</description><dc:creator>Savitha Gollamudi</dc:creator><category>javascript</category><category>DOM</category><category>es6</category><category>events</category><category>javascript</category></item><item><title>Hosting react projects on GH Pages</title><link>https://gsavitha.in/posts/host-react-on-gh-pages/</link><pubDate>Fri, 11 Sep 2020 12:31:59 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Fri, 11 Sep 2020 12:31:59 +0530</atom:modified><guid>https://gsavitha.in/posts/host-react-on-gh-pages/</guid><description>Want to host a react website? You cant afford paying bills for each and every project?
Well, Don&amp;rsquo;t worry now you can do that for free with the help of Github Pages. Using GH Pages you can host any website for free in a secured way.
When you host any static website or blog on github servers, basically your domain name would be in this format: {username}.github.io/{repo-name}, if you wish to host it on your own domain, no problem you can do that as well.</description><dc:creator>Savitha Gollamudi</dc:creator><category>ghpages</category><category>react</category><category>hosting</category><category>devops</category><category>ci-cd</category></item><item><title>Syncing Git Fork with Original Repository</title><link>https://gsavitha.in/posts/sync-fork-with-original-git/</link><pubDate>Fri, 11 Sep 2020 11:30:29 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Fri, 11 Sep 2020 11:30:29 +0530</atom:modified><guid>https://gsavitha.in/posts/sync-fork-with-original-git/</guid><description>TL;DR 🚀 These are the only commands you need to sync your forked repo with the original repo
1 2 3 4 5 git remote add upstream https://github.com/&amp;lt;Original Owner Username&amp;gt;/&amp;lt;Original Repository&amp;gt;.git git fetch upstream git checkout master git merge upstream/master git push Why should I do this? 😏 Before submitting any pull request, syncing your forked repository with original repository is an important step to perform, as you may want to get the bug fixes or additional features to merge with your code since the time you forked the original repo.</description><dc:creator>Savitha Gollamudi</dc:creator><category>git</category><category>tools</category><category>ci-cd</category><category>snippets</category><category>ci-cd</category><category>devops</category><category>snippets</category></item><item><title>React State Patterns</title><link>https://gsavitha.in/posts/react-state-patterns/</link><pubDate>Tue, 01 Sep 2020 16:27:52 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Tue, 01 Sep 2020 16:27:52 +0530</atom:modified><guid>https://gsavitha.in/posts/react-state-patterns/</guid><description>Setting State Using State We know that setState() is asynchronous…
So: it’s risky to assume previous call has finished when you call it. Also, React will sometimes batch (squash together) calls to setState together into one for performance reasons. If a call to setState() depends on current state, the safest thing is to use the alternate “callback form”.
setState Callback Form this.setState(callback)
Instead of passing an object, pass it a callback with the current state as a parameter.</description><dc:creator>Savitha Gollamudi</dc:creator><category>react</category><category>react</category></item><item><title>Build your own website in 10 min! with hugo</title><link>https://gsavitha.in/posts/build-your-own-site/</link><pubDate>Sun, 23 Aug 2020 14:58:40 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Sun, 23 Aug 2020 14:58:40 +0530</atom:modified><guid>https://gsavitha.in/posts/build-your-own-site/</guid><description>Yes you read it right, you can build and host your website in 10 min 😎.
But how?
Static site generators to the rescue Ok but first, what is a static site? 😕 Basically websites are of two types, static and dynamic. A static site as the name sounds it is - static, constant and fixed. It doesn&amp;rsquo;t change dynamically when a developer makes a change to a file . They just create the static content(HTML and CSS) and upload them on to the server where it remains unchanged.</description><dc:creator>Savitha Gollamudi</dc:creator><category>hugo</category><category>website</category><category>portfolio</category><category>misc</category></item></channel></rss>