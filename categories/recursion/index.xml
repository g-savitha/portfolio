<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>recursion on Savitha's Notes</title><link>https://g-savitha.github.io/categories/recursion/</link><description>Recent content in recursion on Savitha's Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 23 Aug 2020 17:17:32 +0530</lastBuildDate><atom:link href="https://g-savitha.github.io/categories/recursion/index.xml" rel="self" type="application/rss+xml"/><item><title>Recursion</title><link>https://g-savitha.github.io/notes/recursion/</link><pubDate>Sun, 23 Aug 2020 17:17:32 +0530</pubDate><guid>https://g-savitha.github.io/notes/recursion/</guid><description>Intro to recursion What is recursion?
Recursion : A function calling itself directly or indirectly.
Directly:
1void fun1(){ 2 //somecode ... 3 fun1(); 4 //some other code... 5} Indirectly: Not a very common approach (Mostly direct recursive approach is used)
fun1() -&amp;gt; fun2() -&amp;gt; fun1()
1void fun1(){ 2 //somecode ... 3 fun2(); 4 //some other code... 5} 6void fun2(){ 7 //somecode ... 8 fun1(); 9 //some other code... 10} 11 12 If you dont add a base case, recursion never stops and we might end up with stackoverflow(in case of java) or segmentation fault error(in case of cpp).</description></item></channel></rss>