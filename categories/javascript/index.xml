<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>javascript on Savitha's Blog</title><link>https://www.gsavitha.in/categories/javascript/</link><description>Recent content in javascript on Savitha's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>gsavitha@protonmail.com (Savitha)</managingEditor><webMaster>gsavitha@protonmail.com (Savitha)</webMaster><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Tue, 13 Dec 2022 16:30:47 +0530</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.gsavitha.in/categories/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>The Pillars of JS Series: Introduction</title><link>https://www.gsavitha.in/posts/pillars-of-js/</link><pubDate>Tue, 13 Dec 2022 16:30:47 +0530</pubDate><author>gsavitha@protonmail.com (Savitha)</author><atom:modified>Tue, 13 Dec 2022 16:30:47 +0530</atom:modified><guid>https://www.gsavitha.in/posts/pillars-of-js/</guid><description>Hello world ðŸ‘‹
Today I&amp;rsquo;ve decided to start a new series on javascript, I hope this helps you to gain a deeper understanding of core concepts.
Without getting delayed lets get staryed ðŸš€
As a part of this series I will be covering
Execution Context, Callbacks and Higher order functions
The Closures
Asynchronous Javascript
Promises
Classes and Prototypes
I hope you&amp;rsquo;ve enjoyed this series.</description><dc:creator>Savitha</dc:creator><media:content url="https://www.gsavitha.inhttps://www.tutorialrepublic.com/lib/images/javascript-illustration.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>javascript</category><category>javascript</category><category>Pillars of JS</category></item><item><title>Async and Await</title><link>https://www.gsavitha.in/posts/async-await/</link><pubDate>Wed, 12 May 2021 12:58:09 +0530</pubDate><author>gsavitha@protonmail.com (Savitha)</author><atom:modified>Wed, 12 May 2021 12:58:09 +0530</atom:modified><guid>https://www.gsavitha.in/posts/async-await/</guid><description>Before getting started you need to know..
How Asynchronous code works in JS What are promises and how they work Introduction To work with async functions, we need to use callbacks or promises. Async and await makes our work easier and cleaner with promises and create synchronous looking asynchronous code
The async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.</description><dc:creator>Savitha</dc:creator><media:content url="https://www.gsavitha.inhttps://media.ma-no.org/imgr/1280-640/admin-async-await-javascript.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>javascript</category><category>async</category><category>javascript</category></item><item><title>Asynchronous Code in Javascript</title><link>https://www.gsavitha.in/posts/async-code-in-js/</link><pubDate>Wed, 12 May 2021 12:09:58 +0530</pubDate><author>gsavitha@protonmail.com (Savitha)</author><atom:modified>Wed, 12 May 2021 12:09:58 +0530</atom:modified><guid>https://www.gsavitha.in/posts/async-code-in-js/</guid><description>Hey there ðŸ‘‹,
Before diving into the world of asynchronous events, lets first understand what happens when you execute a function? where do they get stored in memory? How does the interpreter knows the order of the functions to be executed? Can we run multiple functions at a time?
Without making any further delay, lets get started&amp;hellip;
The call stack The mechanism JS interpreter uses to keep track of its place in a script that calls multiple functions.</description><dc:creator>Savitha</dc:creator><media:content url="https://www.gsavitha.inhttps://miro.medium.com/max/1678/1*O_H6XRaDX9FaC4Q9viiRAA.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>javascript</category><category>async</category><category>javascript</category></item><item><title>Promises Explained</title><link>https://www.gsavitha.in/posts/promises-explained/</link><pubDate>Wed, 12 May 2021 05:30:10 +0530</pubDate><author>gsavitha@protonmail.com (Savitha)</author><atom:modified>Wed, 12 May 2021 05:30:10 +0530</atom:modified><guid>https://www.gsavitha.in/posts/promises-explained/</guid><description>Promises are one of the important concepts in javascript one should be familiar with.
Pre-requisite: Before going into promises you need to understand what is asynchronous code, how it works, what are callbacks and why are promises introduced.
Checkout Asynchronous Code in JavaScript
Once you understand that, without making any further delay lets get started..
Intro to Promises A promise is an object representing the eventual completion(usually which takes time) or failure of an asynchronous operation.</description><dc:creator>Savitha</dc:creator><media:content url="https://www.gsavitha.inhttps://www.freecodecamp.org/news/content/images/2020/06/Ekran-Resmi-2020-06-06-12.21.27.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>javascript</category><category>async</category><category>javascript</category></item><item><title>Event Handling in JS</title><link>https://www.gsavitha.in/posts/event-handling-in-js/</link><pubDate>Sat, 26 Sep 2020 15:18:15 +0530</pubDate><author>gsavitha@protonmail.com (Savitha)</author><atom:modified>Sat, 26 Sep 2020 15:18:15 +0530</atom:modified><guid>https://www.gsavitha.in/posts/event-handling-in-js/</guid><description>Intro to DOM Events Events - Responding to user inputs and actions
Types of events:(some of the many)
clicks, drags, drops, hovers,scrolls, form submissions, key press, focus/blur mousewheel, double click, copying, pasting, audio start, screen resize, printing etc. Note: All events follow a similar pattern
Pattern:
The thing Event type Code to run button click change the color input hits return get the search results image mouseover display img caption for more info visit MDN Event reference 2 ways not to add events Lets explore 2 different syntaxes which we should not use.</description><dc:creator>Savitha</dc:creator><media:content url="https://www.gsavitha.inhttps://res.cloudinary.com/practicaldev/image/fetch/s--ohpJlve1--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://res.cloudinary.com/drquzbncy/image/upload/v1586605549/javascript_banner_sxve2l.jpg" medium="image"><media:title type="html">featured image</media:title></media:content><category>javascript</category><category>DOM</category><category>es6</category><category>events</category><category>javascript</category></item></channel></rss>