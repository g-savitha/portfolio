<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>javascript on Savitha's Blog</title><link>https://www.gsavitha.in/categories/javascript/</link><description>Recent content in javascript on Savitha's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>gsavitha@protonmail.com (Savitha Gollamudi)</managingEditor><webMaster>gsavitha@protonmail.com (Savitha Gollamudi)</webMaster><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Mon, 27 Mar 2023 13:26:46 +0530</lastBuildDate><sy:updatePeriod>weekly</sy:updatePeriod><atom:link href="https://www.gsavitha.in/categories/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Feature Queries in Web Development</title><link>https://www.gsavitha.in/posts/feature-quries/</link><pubDate>Mon, 27 Mar 2023 13:26:46 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Mon, 27 Mar 2023 13:26:46 +0530</atom:modified><guid>https://www.gsavitha.in/posts/feature-quries/</guid><description>What are feature queries? Feature queries are a set of conditional statements that check whether a particular feature is supported by a browser or not. These queries are used to control the behavior of a website by providing fallbacks or alternative styles for browsers that do not support certain features.
For example, let&amp;rsquo;s say you want to use the CSS Grid layout in your website. However, not all browsers support CSS Grid.</description><dc:creator>Savitha Gollamudi</dc:creator><category>css</category><category>javascript</category><category>legacy</category><category>css</category><category>javascript</category></item><item><title>Execution Context Demystified</title><link>https://www.gsavitha.in/posts/exec-context/</link><pubDate>Sat, 25 Mar 2023 14:14:58 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Sat, 25 Mar 2023 14:14:58 +0530</atom:modified><guid>https://www.gsavitha.in/posts/exec-context/</guid><description>Greetings! ðŸ‘‹,
Welcome to the first part of the JS Hard Parts: Demystified series. In this post, we will delve into the concepts of callbacks, execution context, functions, and higher-order functions. So let&amp;rsquo;s get started without any delay ðŸš€
Before we proceed, I assume that you already have knowledge of writing loops, functions, and call stack
Functions, callbacks and execution context Let&amp;rsquo;s take an example to understand the concepts better. We have a function called copyArrayAndMultiplyBy2 that accepts an array, multiplies each element of the array by 2, and returns the new array.</description><dc:creator>Savitha Gollamudi</dc:creator><media:content url="https://www.gsavitha.inhttps://res.cloudinary.com/practicaldev/image/fetch/s--Wxyjx1Ym--/c_imagga_scale,f_auto,fl_progressive,h_900,q_auto,w_1600/https://dev-to-uploads.s3.amazonaws.com/i/01ksqw5twx22ilo4pibc.jpg" medium="image"><media:title type="html">featured image</media:title></media:content><category>javascript</category><category>HOF</category><category>Higher Order Functions</category><category>execution context</category><category>demystified</category><category>javascript</category><category>JS Hard Parts</category></item><item><title>JS Hard Parts Demystified: Introduction</title><link>https://www.gsavitha.in/posts/js-hard-parts/</link><pubDate>Thu, 23 Mar 2023 12:39:37 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Thu, 23 Mar 2023 12:39:37 +0530</atom:modified><guid>https://www.gsavitha.in/posts/js-hard-parts/</guid><description>Hello there! ðŸ‘‹
I&amp;rsquo;m excited to announce the start of a new series on Javascript that aims to provide a deeper understanding of core concepts. Let&amp;rsquo;s dive right in without delay! ðŸš€
This series will cover the following topics:
Execution Context, Callbacks, and Higher-Order Functions : This topic will cover the fundamental concepts of the execution context in JavaScript, how callbacks are used in higher-order functions, and why they are essential in modern web development.</description><dc:creator>Savitha Gollamudi</dc:creator><media:content url="https://www.gsavitha.inhttps://www.tutorialrepublic.com/lib/images/javascript-illustration.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>javascript</category><category>foundations</category><category>demystified</category><category>javascript</category><category>JS Hard Parts</category></item><item><title>Async and Await</title><link>https://www.gsavitha.in/posts/async-await/</link><pubDate>Wed, 12 May 2021 12:58:09 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Wed, 12 May 2021 12:58:09 +0530</atom:modified><guid>https://www.gsavitha.in/posts/async-await/</guid><description>Before getting started you need to know..
How Asynchronous code works in JS What are promises and how they work Introduction To work with async functions, we need to use callbacks or promises. Async and await makes our work easier and cleaner with promises and create synchronous looking asynchronous code
The async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.</description><dc:creator>Savitha Gollamudi</dc:creator><media:content url="https://www.gsavitha.inhttps://media.ma-no.org/imgr/1280-640/admin-async-await-javascript.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>javascript</category><category>async</category><category>javascript</category></item><item><title>Asynchronous Code in Javascript</title><link>https://www.gsavitha.in/posts/async-code-in-js/</link><pubDate>Wed, 12 May 2021 12:09:58 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Wed, 12 May 2021 12:09:58 +0530</atom:modified><guid>https://www.gsavitha.in/posts/async-code-in-js/</guid><description>Hey there ðŸ‘‹,
Before diving into the world of asynchronous events, lets first understand what happens when you execute a function? where do they get stored in memory? How does the interpreter knows the order of the functions to be executed? Can we run multiple functions at a time?
Without making any further delay, lets get started&amp;hellip;
The call stack The mechanism JS interpreter uses to keep track of its place in a script that calls multiple functions.</description><dc:creator>Savitha Gollamudi</dc:creator><media:content url="https://www.gsavitha.inhttps://miro.medium.com/max/1678/1*O_H6XRaDX9FaC4Q9viiRAA.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>javascript</category><category>async</category><category>javascript</category></item><item><title>Promises Explained</title><link>https://www.gsavitha.in/posts/promises-explained/</link><pubDate>Wed, 12 May 2021 05:30:10 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Wed, 12 May 2021 05:30:10 +0530</atom:modified><guid>https://www.gsavitha.in/posts/promises-explained/</guid><description>Promises are one of the important concepts in javascript one should be familiar with.
Pre-requisite: Before going into promises you need to understand what is asynchronous code, how it works, what are callbacks and why are promises introduced.
Checkout Asynchronous Code in JavaScript
Once you understand that, without making any further delay lets get started..
Intro to Promises A promise is an object representing the eventual completion(usually which takes time) or failure of an asynchronous operation.</description><dc:creator>Savitha Gollamudi</dc:creator><media:content url="https://www.gsavitha.inhttps://www.freecodecamp.org/news/content/images/2020/06/Ekran-Resmi-2020-06-06-12.21.27.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>javascript</category><category>async</category><category>javascript</category></item><item><title>Event Handling in JS</title><link>https://www.gsavitha.in/posts/event-handling-in-js/</link><pubDate>Sat, 26 Sep 2020 15:18:15 +0530</pubDate><author>gsavitha@protonmail.com (Savitha Gollamudi)</author><atom:modified>Sat, 26 Sep 2020 15:18:15 +0530</atom:modified><guid>https://www.gsavitha.in/posts/event-handling-in-js/</guid><description>Intro to DOM Events Events - Responding to user inputs and actions
Types of events:(some of the many)
clicks, drags, drops, hovers,scrolls, form submissions, key press, focus/blur mousewheel, double click, copying, pasting, audio start, screen resize, printing etc. Note: All events follow a similar pattern
Pattern:
The thing Event type Code to run button click change the color input hits return get the search results image mouseover display img caption for more info visit MDN Event reference 2 ways not to add events Lets explore 2 different syntaxes which we should not use.</description><dc:creator>Savitha Gollamudi</dc:creator><media:content url="https://www.gsavitha.inhttps://res.cloudinary.com/practicaldev/image/fetch/s--ohpJlve1--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://res.cloudinary.com/drquzbncy/image/upload/v1586605549/javascript_banner_sxve2l.jpg" medium="image"><media:title type="html">featured image</media:title></media:content><category>javascript</category><category>DOM</category><category>es6</category><category>events</category><category>javascript</category></item></channel></rss>