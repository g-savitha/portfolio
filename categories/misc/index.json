[{"content":"Hey there üëãüèª, Savitha here. I am a software developer from India. I love to try new things, build stuff and share the knowledge I gained from it. Even though I\u0026rsquo;ve gotten my hands dirty in various languages and frameworks I love JS ‚ù§Ô∏è and its ecosystem.\nIn my free time I practice DSA on leetcode. Other than coding, I play video games and listen to music\nBy the way, I\u0026rsquo;m maintaining a repository of solutions for all the problems I solved on leetcode. My plan is to make it a one stop place to find solutions to all the problems in various programming languages. Please feel free to fork the repository and contribute to it.\nI\u0026rsquo;m always reachable via., email or tweet me @gsavitha_. If you are on linkedin feel free to connect anytime to discuss about opportunities or any Open source ideas or incase you need any help. üòÑ\n","description":"about me","id":17,"section":"","tags":null,"title":"About","uri":"https://www.gsavitha.in/about/"},{"content":"What is recursion? Recursion : A function calling itself directly or indirectly.\nDirectly:\n1 2 3 4 5  void fun1(){ //somecode ...  fun1(); //some other code... }   Indirectly: Not a very common approach (Mostly direct recursive approach is used)\nfun1() -\u0026gt; fun2() -\u0026gt; fun1()\n1 2 3 4 5 6 7 8 9 10 11 12  void fun1(){ //somecode ...  fun2(); //some other code... } void fun2(){ //somecode ...  fun1(); //some other code... }    If you dont add a base case, recursion never stops and we might end up with stackoverflow(in case of java) or segmentation fault error(in case of cpp). There should be one stopping condition atleast. Such stopping conditions are called Base cases  Example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  void fun1(int n) { //Base Case  if (n == 0) return; cout \u0026lt;\u0026lt; \u0026#34;Function 1\u0026#34; \u0026lt;\u0026lt; endl; fun1(n - 1); } int main(int argc, char const *argv[]) { /* code */ fun1(2); return 0; }   Typical structure of a recursion (Assuming: You are not using global vars or some other tricks to stop recursion ).\n1 2 3 4 5 6  returntype function(parameters){ Base cases //some other code..... Recursive call (i.e., call to function()) with atleast one change in parameters //some other code... }   Applications of recursion Any problem which can be solved iteratively can also be solved using recursively and vice-versa. They both have same expressive power.\nNow the question is if we can write equivalent iterative code for every recursive code or vice versa, where do we use recursion?\n  Many algorithm techniques are based on recursion.\n Dynamic programming  In DP, generally first solution is to write a recursive solution. If we see overlapping subproblems (apply memoization or tabulation), we use DP to optimise it. Example: Finding diff between two files (solved using LCS approach)   Backtracking  These problems are inherently recursive in nature.  Example : Rat in a maze, n-queens problem. (Its easy to write recursive solns than iterative for problems like this)     Divide and conquer  Examples: Binary search, quicksort and mergesort      Many problems which are inherently recursive (Easy to write recursive than iterative)\n Towers of Hanoi DFS based travels  Of Graphs Inorder, preorder postorder traversals of tree Searching for a file in your pc - solid example of DFS      Cons of recursion\n (Auxillary) space complexity increases Function call overhead.    Pros:\n Easy implementation    Examples cpp cpp cpp  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  void fun1(int n) { if (n == 0) return; //Base Case  cout \u0026lt;\u0026lt; n \u0026lt;\u0026lt; endl; fun1(n - 1); cout \u0026lt;\u0026lt; n \u0026lt;\u0026lt; endl; } int main(int argc, char const *argv[]) { /* code */ fun1(3); return 0; } //Output : 321123     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  void fun1(int n) { if (n == 0) return; //Base Case  fun1(n - 1); cout \u0026lt;\u0026lt; n \u0026lt;\u0026lt; endl; fun1(n - 1); } int main(int argc, char const *argv[]) { /* code */ fun1(3); return 0; } //Output : 1213121     1 2 3 4 5 6 7 8 9 10 11 12 13 14  int fn(int n) { if (n == 1) return 0; else return 1 + fn(n / 2); } //TC: O(floor(logn base2)) //SC: O(n/2) //fn(16) -\u0026gt; O/p: 4 =\u0026gt; (1+f(8)) -\u0026gt;(1+1+f(4)) -\u0026gt;(1+1+1+f(2)) -\u0026gt; (1+1+1+1+f(1)) //fn(20) -\u0026gt; o/p: 4 =\u0026gt;(1+f(10)) -\u0026gt; (1+1+f(5)) -\u0026gt; (1+1+1+f(2)) -\u0026gt; (1+1+1+1+f(1)) //fn(19) -\u0026gt; o/p:4 =\u0026gt; (1+f(9)) -\u0026gt; (1+1+f(4)) -\u0026gt; -\u0026gt;(1+1+1+f(2)) -\u0026gt; (1+1+1+1+f(1))  //output remains same until we get to next power of 2.       'use strict'; var containerId = JSON.parse(\"\\\"17f48c26f379fb8b\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  Binary representation of a number(n \u0026gt; 0) using recursion 1 2 3 4 5 6 7  int fn(int n) { if (n == 0) return; fn(n / 2); cout \u0026lt;\u0026lt; n % 2 \u0026lt;\u0026lt; endl; }   Print 1 to N using recursion 1 2 3 4 5 6  private static void fn(int n) { if (n == 0) return; fn(n - 1); System.out.println(n); }//TC; O(n) AS: O(n+1)   Print N to 1 using recursion 1 2 3 4 5 6 7  private static void fn(int n) { if (n == 0) return; System.out.println(n); n(n - 1); }// TC: theta(n) //SC: (Auxillary space) : O(n)    Note: We can reduce the auxillary space using tail recursion.  The above function takes less time on modern compilers because of tail recursion    Tail Recursion To understand tail recursion, lets take a closer look at these 2 functions.\njava java  1 2 3 4 5 6 7  //prints from n to 1 void fn1() { if(n==0) return; System.out.println(n); fn1(n-1); } //this function takes lesser time     1 2 3 4 5 6  //prints from 1 to n void fn2(){ if(n==0) return; fn2(n-1); System.out.println(n); }       'use strict'; var containerId = JSON.parse(\"\\\"8115045dd92aca3b\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  Can you guess the reason why would 1st function take lesser time to compile on modern compilers?\nIf you look at the call stack of fn1()\n When fn1(0) finishes, control returns back to fn1(1), fn1(1) doesnt have anything to do it finishes immediately. This is where tail recursion comes into picture.\nA function is called Tail recursive when the parent function has nothing to do when the child finishes the call.\nThis is not the case with fn2(3). When fn2(0) returns to its parent fn2(1), it still has got work to do (print the output).\nIn very simple words\n A function is called tail recursive, when the last thing that happens in the function is recursive call and nothing happens after that.\n What are the pros of this? The point is your caller doesn\u0026rsquo;t have to save the state, generally what happens in recursive calls is, caller\u0026rsquo;s state is saved then called function is called and once the called function is finished then the caller resumes its function from the same point. We dont need to resume the execution here at all, there\u0026rsquo;s no point in resuming the execution and thats what the optimisation modern compilers do.\nWhen modern compilers see tail recursive functions they replace the above code with\n1 2 3 4 5 6 7 8 9  void fn1() { //compiler adds this label  start:  if(n==0) return; System.out.println(n); // and replaces the line fn1(n-1) with below statements  n= n-1 ; goto start; }   These changes that modern compilers make are called Tail call elimination\nNow, the question arises is when given a non tail recursive code, can we convert it tail recursive?\nLets have a look at the below examples.\njava java  1 2 3 4 5 6  //prints from 1 to n void fn2(){ if(n==0) return; fn2(n-1); System.out.println(n); }     1 2 3 4 5 6 7  //Tail recursive version of the code //initially pass k = 1 void fn2(int n, int k){ if(n==0) return; System.out.println(k); fn2(n-1,k+1); }       'use strict'; var containerId = JSON.parse(\"\\\"7116fbcdd1c7ca1d\\\"\"); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].style.display = 'block'; }  Can we convert every non tail recursive to tail recursive by adding few parameters?\nNo. Consider merge sort and quick sort, if you take a closer look at these two algorithms, quick sort is tail recursive and merge sort is not. This is one of the reasons, quick sort is fast.\nIn case of tree traversals (Inorder,preorder and postorder), you can notice that preorder traversal and inorder traversal are tail recursive, but post order traversal is not, thats why when you are given a problem and if you can choose any of the traversals, you should prefer either inorder or preorder over the postorder.\nIs this tail recursive? 1 2 3 4  int factorial(int n){ if(n==0 || n== 1) return 1; return n * factorial(n-1); }   No. The reason is recursion is not the last thing that happens in this function. When you call factorial(n-1) you need to know the result of that function and multiply it with n and then it need to return. Parent call doesn\u0026rsquo;t finish immediately after the child call, its going to use the result of child call and then multiply the result with n after that its going to return.\nEquivalent tail recursive code 1 2 3 4 5  //initially pass k = 1 int factorial(int n, int k){ if(n==0 || n== 1) return k; return factorial(n-1,k*n); }   Few problems on recursion worth looking at:\nRod cutting\nGenerate subsets of an array\nJosephus Problem\nPrint all permutations of a string\nSubset sum problem\nUntil next time, happy coding! üéâ üíª\n","description":"","id":18,"section":"posts","tags":["dsa","recursion"],"title":"Recursion Simplified","uri":"https://www.gsavitha.in/posts/recursion-simplified/"},{"content":"TL;DR üöÄ  If you want to use this.props inside constructor of derived class, use super(props).\n While checking react code, you might have come across a line super(props), sometimes super(). Ever wondered what\u0026rsquo;s the difference between two?\nWhy do we need to pass props ? Do we always need to pass props ?\nConsider the example below.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  import React, { Component } from \u0026#34;react\u0026#34;; class Game extends Component {  constructor(props) { super(props); this.state = { player: \u0026#34;Robin\u0026#34;, score: 25, }; } render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Cricket\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Current Player :{this.state.player}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Current Score : {this.state.score}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } } export default Game;   Every time we are writing a component, we are extending it from React component (The base component class) and that\u0026rsquo;s really important if we don\u0026rsquo;t do that we would be missing a ton of react functionality.\nLet\u0026rsquo;s step out of react world for just a moment and let\u0026rsquo;s mimic our own component class\n1 2 3 4 5 6 7 8 9 10  class Component { constructor() { console.log(\u0026#34;INSIDE COMPONENT CONSTRUCTOR\u0026#34;); } } class Game extends Component { constructor() { console.log(\u0026#34;INSIDE GAME CONSTRUCTOR\u0026#34;); } }   Lets make a new game\n1  let cricket = new Game();   So you might think, when we initialized a new game, a constructor is called and that should be printed out, unfortunately we get an error\nsays : Must call super constructor before accessing \u0026lsquo;this\u0026rsquo; . Loosely translated, call a super constructor in derived class before basically doing anything.\nProblem is we are extending the base class but we never actually called its constructor and that\u0026rsquo;s super important to do in the derived class\u0026rsquo;s constructor (Inside Game\u0026rsquo;s constructor here), we need to make sure that we\u0026rsquo;re calling the class (it\u0026rsquo;s constructor) we are extending, especially in React because that\u0026rsquo;s how we call all the magic setup stuff that React does and takes care of out of the box for us. so we call super()\n1 2 3 4 5 6  class Game extends Component { constructor() { super();  console.log(\u0026#34;INSIDE GAME CONSTRUCTOR\u0026#34;); } }   Now try to instantiate again.\n1 2 3 4  let cricket = new Game(); //output: //INSIDE COMPONENT CONSTRUCTOR //INSIDE GAME CONSTRUCTOR   What does super(props) do then? Lets look at this example:\n1 2 3 4 5 6 7 8 9 10 11  import React, { Component } from \u0026#34;react\u0026#34;; export default class Food extends Component { render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;HI I AM FOOD COMPONENT\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; ); } }   1 2 3 4 5 6 7 8 9 10 11 12 13  import React, { Component } from \u0026#34;react\u0026#34;; import Food from \u0026#34;./Food\u0026#34;; class App extends Component { render() { return ( \u0026lt;div\u0026gt; \u0026lt;Food item=\u0026#34;PineApple\u0026#34; nutrition=\u0026#34;10\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; ); } } export default App;   We are passing two props to Food component. You can think of it like we are creating two objects for Food class new Food({item : \u0026quot;pineapple\u0026quot;, nutrition: \u0026quot;10\u0026quot;})\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import React, { Component } from \u0026#34;react\u0026#34;; export default class Food extends Component { constructor() { super(); console.log(this.props); // undefined.  } render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;HI I AM FOOD COMPONENT\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; ); } }   We get output as Undefined even though we have props. OK, what\u0026rsquo;s happening here is if we want to access this.props in the constructor, we have to pass props in super (super(props)). This is kind of bizzare, lets consider this example.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import React, { Component } from \u0026#34;react\u0026#34;; export default class Food extends Component { constructor() { super(); console.log(this.props); // undefined.  console.log(props); // {item:\u0026#34;pineapple\u0026#34;, nutrition:10}  } render() { return ( \u0026lt;div\u0026gt;  \u0026lt;h1\u0026gt;{this.props.item}\u0026lt;/h1\u0026gt; /*Prints out pineapple*/ \u0026lt;/div\u0026gt; ); } }   However if you do\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import React, { Component } from \u0026#34;react\u0026#34;; export default class Food extends Component { constructor() { super(props);  console.log(this.props); // {item:\u0026#34;pineapple\u0026#34;, nutrition:10}  } render() { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{this.props.item}\u0026lt;/h1\u0026gt; /*Prints out pineapple*/ \u0026lt;/div\u0026gt; ); } }   To conclude, If you want to use this.props inside constructor, you need to pass props in super(), otherwise it‚Äôs okay to not pass props to super() as we see that irrespective of passing it to super(), this.props is available inside render() function.\nHopefully that was not convoluted and crazy, until next time. Happy Coding! üéâ üíª\n","description":"","id":19,"section":"posts","tags":["react"],"title":"super() vs super(props)","uri":"https://www.gsavitha.in/posts/super-vs-super-props/"},{"content":"Want to host a react website? You cant afford paying bills for each and every project?\nWell, Don\u0026rsquo;t worry now you can do that for free with the help of Github Pages. Using GH Pages you can host any website for free in a secured way.\nWhen you host any static website or blog on github servers, basically your domain name would be in this format: {username}.github.io/{repo-name}, if you wish to host it on your own domain, no problem you can do that as well.\nIn this post let\u0026rsquo;s see how to host a react project on GH Pages.\nBefore continuing further, I assume that you know what is Github and how to create a react app. Let\u0026rsquo;s get started\u0026hellip;\nTL;DR üöÄ These are the only commands you need to execute\n1  npm install gh-pages --save-dev   Package.json\n1 2 3 4 5 6 7 8  \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;react-scripts start\u0026#34;, \u0026#34;predeploy\u0026#34;: \u0026#34;npm run build\u0026#34;, \u0026#34;deploy\u0026#34;: \u0026#34;gh-pages -d build\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;react-scripts build\u0026#34;, }, //add homepage property \u0026#34;homepage\u0026#34;: \u0026#34;https://g-savitha.github.io/projectname\u0026#34;   1  npm run deploy   Create a repository First things first, create a repository in your Github profile. For instance I\u0026rsquo;d like to create an app with name deploy-react-app\nNote: If you have already developed a react app and pushed it onto Github you can skip this section..\nCreate react app After creating a repo, Let\u0026rsquo;s create a react app usingcreate-react-app.\n1 2  npx create-react-app deploy-react-app cd deploy-react-app   Once you created a react app and changed into its directory. Run the following commands in terminal/command prompt.\n1 2 3 4 5  git init git add -A git commit -m \u0026#34;initial commit\u0026#34; git remote add origin https://github.com/username/deploy-react-app.git git push origin master   Note: replace username with your own Github username and if you are using ssh instead of https for Github repo add git remote add origin git@github.com:username/deploy-react-app.git\nOnce you pushed your code to Github\u0026hellip;\nDeploy app on GH Pages  Install gh-pages as dev-dependency of react app. 1  npm install gh-pages --save-dev    Add the homepage property in your package.json file. homepage attribute value should be String. http://{username}.github.io/{repo-name} (username must be your Github username and repo-name must be your GitHub repository) 1  \u0026#34;homepage\u0026#34;: \u0026#34;https://g-savitha.github.io/deploy-react-app\u0026#34;    Add the predeploy and deploy properties with existing scripts property in your project\u0026rsquo;s package.json 1 2 3 4 5 6 7 8  \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;react-scripts start\u0026#34;, \u0026#34;predeploy\u0026#34;: \u0026#34;npm run build\u0026#34;, \u0026#34;deploy\u0026#34;: \u0026#34;gh-pages -d build\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;react-scripts build\u0026#34;, \u0026#34;test\u0026#34;: \u0026#34;react-scripts test\u0026#34;, \u0026#34;eject\u0026#34;: \u0026#34;react-scripts eject\u0026#34; },   The predeploy script initiates after running our deploy script, which bundles our application for deployment.\n Deploy your application to GH pages. 1  npm run deploy     After succesfully deploying the application, Open your github repository. Go to Settings tab of the repository, scroll down until you reach Github Pages section and choose gh-pages branch as the source.\nBOOM! üí• your website is hosted on Github pages now.\nOther than Github, you can host your website on Heroku, Vercel, Firebase, Netlify and more. Try out as many as you can to determine which best aligns with your deployment requirements. After all they\u0026rsquo;re free to use üòÉ.\nFor a good next step, try to add custom domains to your deployed application. It‚Äôs good to have a distinctive domain for projects.\nUntil next time, Happy coding! üíª üéâ\n","description":"","id":20,"section":"posts","tags":["ghpages","react","hosting"],"title":"Hosting react projects on GH Pages","uri":"https://www.gsavitha.in/posts/host-react-on-gh-pages/"},{"content":"TL;DR üöÄ These are the only commands you need to sync your forked repo with the original repo\n1 2 3 4 5  git remote add upstream https://github.com/\u0026lt;Original Owner Username\u0026gt;/\u0026lt;Original Repository\u0026gt;.git git fetch upstream git checkout master git merge upstream/master git push   Why should I do this? üòè Before submitting any pull request, syncing your forked repository with original repository is an important step to perform, as you may want to get the bug fixes or additional features to merge with your code since the time you forked the original repo.\nBut I can do a PR instead.. üíÅ‚Äç‚ôÄÔ∏è You can, but that adds an extra commit into your forked repo instead of matching it with the original repo.\nInorder to sync without any additional changes as a part of the process,\n Configure the original repo as upstream remote. Merge changes from original repo Push the merged version back to Github.  Adding original repo as an upstream  Open the forked repo in your Git Bash or command prompt or terminal. List the current configured remote repositories  1 2 3  git remote -v \u0026gt; origin https://github.com/\u0026lt;YOUR_USERNAME\u0026gt;/\u0026lt;YOUR_FORK\u0026gt;.git (fetch) \u0026gt; origin https://github.com/\u0026lt;YOUR_USERNAME\u0026gt;/\u0026lt;YOUR_FORK\u0026gt;.git (push)    Add the original repo as upstream repo  1  git remote add upstream https://github.com/\u0026lt;ORIGINAL_OWNER\u0026gt;/\u0026lt;ORIGINAL_REPOSITORY\u0026gt;.git    Verify the new upstream repo for your forked repo  1 2 3 4 5  git remote -v \u0026gt; origin https://github.com/\u0026lt;YOUR_USERNAME\u0026gt;/\u0026lt;YOUR_FORK\u0026gt;.git (fetch) \u0026gt; origin https://github.com/\u0026lt;YOUR_USERNAME\u0026gt;/\u0026lt;YOUR_FORK\u0026gt;.git (push) \u0026gt; upstream https://github.com/\u0026lt;ORIGINAL_OWNER\u0026gt;/\u0026lt;ORIGINAL_REPOSITORY\u0026gt;.git (fetch) \u0026gt; upstream https://github.com/\u0026lt;ORIGINAL_OWNER\u0026gt;/\u0026lt;ORIGINAL_REPOSITORY\u0026gt;.git (push)   You can now pull the changes from original repo.\nMerge changes from upstream  Open the forked repo in your Git Bash or command prompt or terminal. First things first, fetch the changes (branches and their commits) from upstream  1 2 3 4 5 6 7  git fetch upstream \u0026gt; remote: Counting objects: 75, done. \u0026gt; remote: Compressing objects: 100% (53/53), done. \u0026gt; remote: Total 62 (delta 27), reused 44 (delta 9) \u0026gt; Unpacking objects: 100% (62/62), done. \u0026gt; From https://github.com/\u0026lt;ORIGINAL_OWNER\u0026gt;/\u0026lt;ORIGINAL_REPOSITORY\u0026gt; \u0026gt; * [new branch] master -\u0026gt; upstream/master   Note : Commits to the original repo(master) will be stored in a local branch, upstream/master\n Make sure you are on your local (fork\u0026rsquo;s) master branch  1 2  git checkout master \u0026gt; Switched to branch \u0026#39;master\u0026#39;    The last step, which achieves our goal: Merge changes from original repo (upstream/master) into your forked repo(master).  1 2 3 4  git merge upstream/master \u0026gt; Updating a422352..5fdff0f \u0026gt; Fast-forward \u0026gt; ...   This step brings changes of forked repo in sync with original repo, without losing any uncommited changes :D\nOptional Step If you made changes to your repo and want to push them back to Github\n1  git push origin master   ","description":"","id":21,"section":"posts","tags":["git","tools","ci-cd"],"title":"Syncing Git Fork with Original Repository","uri":"https://www.gsavitha.in/posts/sync-fork-with-original-git/"},{"content":"Setting State Using State We know that setState() is asynchronous‚Ä¶\nSo: it‚Äôs risky to assume previous call has finished when you call it. Also, React will sometimes batch (squash together) calls to setState together into one for performance reasons. If a call to setState() depends on current state, the safest thing is to use the alternate ‚Äúcallback form‚Äù.\nsetState Callback Form this.setState(callback)\nInstead of passing an object, pass it a callback with the current state as a parameter. The callback should return an object representing the new state.\n1  this.setState((curState) =\u0026gt; ({ count: curState.count + 1 }));   Abstracting State Updates The fact that you can pass a function to this.setState lends itself nicely to a more advanced pattern called functional setState.\nBasically you can describe your state updates abstractly as separate functions. But why would you do this?\n1 2 3 4 5 6  // elsewhere in the code function incrementCounter(prevState) { return { count: prevState.count + 1 }; } // somewhere in the component this.setState(incrementCounter);   Because testing your state changes is as simple as testing a plain function:\n1  expect(incrementCounter({ count: 0 })).toEqual({ count: 1 });    This pattern also comes up all the time in Redux!\n Here is a nice opinionated article on the subject of using functional setState\nMutable Data Structures in State Mutable Data Structures We know how to set state to primitives: mainly numbers and strings. But component state also commonly includes objects, arrays, and arrays of objects.\n1 2 3 4 5 6 7  this.state = { // store an array of todo objects  todos: [ { task: \u0026#34;do the dishes\u0026#34;, done: false, id: 1 }, { task: \u0026#34;vacuum the floor\u0026#34;, done: true, id: 2 }, ], };    You have to be extra careful modifying your array of objects!\n 1 2 3 4 5 6 7 8  completeTodo(id) { const theTodo = this.state.todos.find(t =\u0026gt; t.id === id); theTodo.done = true; // NOOOOO -\u0026gt; WRONG WAY  this.setState({ todos: this.state.todos // bad -\u0026gt; VERY BAD WAY TO SET LIKE THIS  }); }   Why? It‚Äôs a long story‚Ä¶\nMutating nested data structures in your state can cause problems w/ React. (A lot of the time it‚Äôll be fine, but that doesn‚Äôt matter. Just don‚Äôt do it!)\nImmutable State Updates A much better way is to make a new copy of the data structure in question. We can use any pure function to do this‚Ä¶\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  completeTodo(id) { // Array.prototype.map returns a new array  const newTodos = this.state.todos.map(todo =\u0026gt; { if (todo.id === id) { // make a copy of the todo object with done -\u0026gt; true  return { ...todo, done: true }; } return todo; // old todos can pass through  }); this.setState({ todos: newTodos // setState to the new array  }); }   Pure functions such as .map, .filter, and .reduce are your friends. So is the ‚Ä¶ spread operator.\nThere is a slight efficiency cost due to the O(N) space/time required to make a copy, but it‚Äôs almost always worth it to ensure that your app doesn‚Äôt have extremely difficult to detect bugs due to mischevious side effects.\nImmutable State Summary  While it sounds like an oxymoron, immutable state just means that there is an old state object and a new state object that are both snapshots in time. The safest way to update state is to make a copy of it, and then call this.setState with the new copy. This pattern is a good habit to get into for React apps and required for using Redux.  Designing State Designing the state of a React application (or any modern web app) is a challenging skill! It takes practice and time! However, there are some easy best-practices that we can talk about in this section to give you a jump-start.\nMinimize Your State In React, you want to try to put as little data in state as possible.\nLitmus test\n does x change? If not, x should not be part of state. It should be a prop. is x already captured by some other value y in state or props? Derive it from there instead.  Bad Example of State Design Let‚Äôs pretend we‚Äôre modelling a Person‚Ä¶\n1 2 3 4 5 6 7  this.state = { firstName: \u0026#34;Matt\u0026#34;, lastName: \u0026#34;Lane\u0026#34;, birthday: \u0026#34;1955-01-08T07:37:59.711Z\u0026#34;, age: 64, mood: \u0026#34;irate\u0026#34;, };    Does Matt‚Äôs first name or last name ever change? Not often I hope‚Ä¶ Does Matt‚Äôs birthday ever change? How is that even possible! Matt‚Äôs age does change, however if we had this.props.birthday we could easily derive it from that. Therefore, the only property here that is truly stateful is arguably mood (although Matt might dispute this üòâ).  Fixed Example of State Design 1 2 3 4 5 6 7 8 9 10 11 12  console.log(this.props); { firstName: \u0026#39;Matt\u0026#39;, lastName: \u0026#39;Lane\u0026#39;, birthday: \u0026#39;1955-01-08T07:37:59.711Z\u0026#39;, age: 64 } console.log(this.state); { mood: \u0026#39;insane\u0026#39; }   State Should Live On the Parent Its better to support \u0026ldquo;downward data flow\u0026rdquo; philosophy of React. In general, it makes more sense for a parent component to manage state and have a bunch of ‚Äúdumb‚Äù stateless child display components. This makes debugging easier, because the state is centralized. It‚Äôs easier to predict where to find state:\nIs the current component stateless? Find out what is rendering it. There‚Äôs the state.\nTodo Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  class TodoList extends Component { constructor(props) { super(props); this.state = { todos: [ { task: \u0026#34;do the dishes\u0026#34;, done: false, id: 1 }, { task: \u0026#34;vacuum the floor\u0026#34;, done: true, id: 2 }, ], }; } /* ... lots of other methods ... */ render() { return ( \u0026lt;ul\u0026gt; {this.state.todos.map((t) =\u0026gt; ( \u0026lt;Todo {...t} /\u0026gt; ))} \u0026lt;/ul\u0026gt; ); } }   TodoList is a smart parent with lots of methods, while the individual Todo items are just \u0026lt;li\u0026gt; tags with some text and styling.\n","description":"","id":22,"section":"posts","tags":["react"],"title":"React State Patterns","uri":"https://www.gsavitha.in/posts/react-state-patterns/"},{"content":"Yes you read it right, you can build and host your website in 10 min üòé.\nBut how?\nStatic site generators to the rescue Ok but first, what is a static site? üòï Basically websites are of two types, static and dynamic. A static site as the name sounds it is - static, constant and fixed. It doesn\u0026rsquo;t change dynamically when a developer makes a change to a file . They just create the static content(HTML and CSS) and upload them on to the server where it remains unchanged.\nWhere as dynamic sites are in almost constant state of change and are powered by servers or Content Management Systems(CMS). Server or CMS builds each page dynamically whenever a change occurs. When a URL is requested to fetch, CMS gets the appropriate data from the DB, loads on HTML, renders the content within template and returns formatted HTML to client\u0026rsquo;s browser. This process is also known as server side processing.\nLooks like CMS website is the solution, then why SSG? ü§∑‚Äç‚ôÄÔ∏è Oh boy, you are a tough cookie. Lets see few of the disadvantages of CMS in brief.\n As CMS started growing popularity, CMS plugins or software have become more vulnerable to cyber attacks and this number is growing. Performance issues. Obviously, because server is doing the more work. Page needs to be loaded each and every time a request is sent, whenever a user visits a site, backend code needs to startup, interact with DB, construct a HTTP response and send it back to server, after all this stuff is done, finally HTML file is returned to display the content.  Ok, how SSGs helps us? Static site generators (SSGs) allow you to have a compromise between writing out a bunch of static html pages and using a potentially heavy (CMS) - retaining the benefits of both üòÆ . Cool right? SSGs give us a flexibility to write code dynamically and publish statically.\nSSGs generates all the static pages of your site at once and deploys it to HTTP server.\nFew of the benefits of using SSGs in brief  Speed and performance. Secured. Now we dont have the problems that come with CMS powered websites. Since static website is solely static files, they have no DB - no DB means no chance of getting hacked . Improved cost and reliabilty. As we dont have a DB, we dont get connection errors like failed to establish connection to DB and also less maintenance costs as we dont have DB any more.  Types of SSGs Now, lets look at some of the most popular options.\n Hugo is a very popular SSG which claims itself as a fastest framework for building sites. It is written in Go Next.js is a server-rendered framework developed on top of React. Gatsby.js is built in React and uses GraphQL to manipulate data. It works great with documentation and blogs. Jekyll is written using Ruby.  Enough with words, Let\u0026rsquo;s get started by building a site. Shall we?\nBuild site with Hugo First things first\u0026hellip;\nInstall hugo To install hugo on linux(Ubuntu and Debian) from your terminal, run\n1 2  sudo apt-get install hugo   For other platforms, check the official guide\nCreate a site Once you install hugo, create a hugo site by running\n1 2  hugo new site mywebsite   Select a theme You need to pick a theme before starting. Wish there was some default theme to get started with. Anyways, there are lots of choices over here. I personally recommend to choose Minimo as it is simple to get started with (You can tweak it later), and also i\u0026rsquo;m a great fan of minimalism üòâ\nInstalling the theme Basically you can install a theme in 3 ways.\n Download the zip file and unzip it manually in themes folder As a git clone As a git submodule.  I recommend that you avoid the git submodule workflow they suggest on the page. You surely want to tweak the theme in future. Its best to have a repo for both the content and the theme same, as the deployment becomes easier (speaking out of personal experience üòÖ , this method gave me a nightmare üòì).\nOk jokes apart. You can download the zip and unzip it manually in the themes/minimo . This method doesn\u0026rsquo;t work greatly all the time.\nSo I recommend to clone the repository. From your terminal run\n1  git clone --depth 1 https://github.com/MunifTanjim/minimo themes/minimo   For installation using other methods and also to tweak the website according to your needs. Check out the official docs\nOnce you have cloned the repo, you need to configure the config.toml . As this is the file, which tells Hugo some details of the configuration to the website you created. So copy the config.toml from the theme whichever you have installed so that you dont accidentally change the theme\u0026rsquo;s info. You can change the info from theme once you are familiar with hugo. If you are a beginner it is not recommended to do so.\n1  cp themes/minimo/exampleSite/config.toml .   That\u0026rsquo;s it your website is created. Tweak the config.toml with your details and start using it. üòÉ\nAdd content and start the server To start the server, run the following command in terminal\n1  hugo serve -D   -D command builds the static pages.\nYou can create a new post by creating a new .md file, prefixing it with your filename. To create some content run\n1  hugo new posts/firstpost.md   This posts folder automatically gets created in content folder. Edit this newly created file with your content\nIt will look something like this.\n1 2 3 4 5  --- title: \u0026#34;First post\u0026#34; date: 2019-03-26T08:47:11+01:00 draft: true ---   Host and publish the site on your custom domain Once you have created your site. You can host it on github-pages or netlify or vercel or gitlab. My personal favourite is github-pages.\nTo know how to host it on gh-pages, refer this official doc. By hosting the site on the respective platform, you will be given a default domain, you can use it or if you wish to have custom domain. Follow the below steps.\nIf you have hosted it on github pages.\n Go to your repository settings, under github pages, choose gh-pages branch as the source of your website. Under custom domain, add your own domain. Thats it your website is now live! üòç  Few resources to learn hugo Giraffe Academy playlist on youtube\nOfficial Hugo Docs\nLearn more about SSGs here\n","description":"","id":23,"section":"posts","tags":["hugo","website","portfolio"],"title":"Build your own website in 10 min! with hugo ","uri":"https://www.gsavitha.in/posts/build-your-own-site/"}]