<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on Savitha's Notes</title><link>https://g-savitha.github.io/tags/javascript/</link><description>Recent content in javascript on Savitha's Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 26 Sep 2020 15:18:15 +0530</lastBuildDate><atom:link href="https://g-savitha.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Event Handling</title><link>https://g-savitha.github.io/notes/events/</link><pubDate>Sat, 26 Sep 2020 15:18:15 +0530</pubDate><guid>https://g-savitha.github.io/notes/events/</guid><description>Intro to DOM Events Events - Responding to user inputs and actions
Types of events:(some of the many)
clicks, drags, drops, hovers,scrolls, form submissions, key press, focus/blur mousewheel, double click, copying, pasting, audio start, screen resize, printing etc. Note: All events follow a similar pattern
Pattern:
The thing Event type Code to run button click change the color input hits return get the search results image mouseover display img caption for more info visit MDN Event reference</description></item><item><title>Manipulating the DOM</title><link>https://g-savitha.github.io/notes/dom-manipulation-02/</link><pubDate>Sat, 26 Sep 2020 13:03:28 +0530</pubDate><guid>https://g-savitha.github.io/notes/dom-manipulation-02/</guid><description>Properties and Methods of DOM Lets look at some of the important properties and methods which we use regularly
innerText &amp;amp; textContent innerText innerText gives the data in between the tags 1const h1 = document.querySelector(&amp;#34;h1&amp;#34;); 2h1.innerText; //My Web page 3const ul = document.querySelector(&amp;#34;ul&amp;#34;); 4ul.innerText; //&amp;#34;First2nd3rd&amp;#34; All the nested content is concatenated and output came as one object 5document.body.innerText; // we get all the text on the webpage, it doesnt matter it is nested or not 6//change the value 7h1.</description></item><item><title>Intro to DOM Manipulation</title><link>https://g-savitha.github.io/notes/dom-manipulation/</link><pubDate>Sat, 26 Sep 2020 12:27:19 +0530</pubDate><guid>https://g-savitha.github.io/notes/dom-manipulation/</guid><description>Introduction DOM is a JS representation of a webpage. (JS window object on to the webpage). In brief, its a branch of objects (Browser turns out webpage into bunch of objects.)that you can interact with, via JS.
Note : Content inside the tags is the property of object Document Object DOM is a representation of a document object made with a bunch of objects &amp;amp; they are assembled into a tree.</description></item><item><title>Intro to Node - 2</title><link>https://g-savitha.github.io/notes/ch-02-node-intro-2/</link><pubDate>Tue, 22 Sep 2020 19:00:37 +0530</pubDate><guid>https://g-savitha.github.io/notes/ch-02-node-intro-2/</guid><description>Creating a Web server http module Gives us networking capability -&amp;gt; such as building a http server. 1const http = require(&amp;#34;http&amp;#34;); http requires a cb fn which gets fired off whenever a new request comes
CB gets access to 2 very imp variables (req and res)
Create a server
start the server -&amp;gt; by listening on incoming reqs
Create a server:</description></item><item><title>Intro to Node</title><link>https://g-savitha.github.io/notes/ch-01-node-intro/</link><pubDate>Tue, 22 Sep 2020 16:09:53 +0530</pubDate><guid>https://g-savitha.github.io/notes/ch-01-node-intro/</guid><description>What is Node and why to use it? What is Node? Node.js is a JS runtime built on top of Google&amp;rsquo;s opensource V8 Js Engine. Node helps us to run JS outside the browser. It acts like a container to run JS code. V8 engine executes the JS code.
Why Node? With help of Node, we can use JS on server-side of web development. We can build fast, highly scalable applications.</description></item><item><title>React Lifecycle Methods</title><link>https://g-savitha.github.io/notes/ch-07-react-lifecycle-methods/</link><pubDate>Tue, 01 Sep 2020 18:20:33 +0530</pubDate><guid>https://g-savitha.github.io/notes/ch-07-react-lifecycle-methods/</guid><description>Note: These notes are taken from Colt steele&amp;rsquo;s Modern React Bootcamp course
React Component Lifecycle Each component has several “lifecycle methods” that one can override to run code at particular times in the process.
These components comes with methods which allows developers to update application state and reflect the changes to the UI before/after key react “events”.
There are three main phases in a component&amp;rsquo;s lifecycle:</description></item><item><title>React Forms</title><link>https://g-savitha.github.io/notes/ch-06-react-forms/</link><pubDate>Sun, 30 Aug 2020 17:51:50 +0530</pubDate><guid>https://g-savitha.github.io/notes/ch-06-react-forms/</guid><description>Note: These notes are taken from Colt steele&amp;rsquo;s Modern React Bootcamp course
Forms HTML form elements work differently than other DOM elements in React Form elements naturally keep some internal state. For example, this form in plain HTML accepts a single name: 1&amp;lt;form&amp;gt; 2 &amp;lt;label for=&amp;#34;fullname&amp;#34;&amp;gt;Full Name:&amp;lt;/label&amp;gt; 3 &amp;lt;input name=&amp;#34;fullname&amp;#34; /&amp;gt; 4 &amp;lt;button&amp;gt;Add!&amp;lt;/button&amp;gt; 5&amp;lt;/form&amp;gt; Thinking About State 1&amp;lt;form&amp;gt; 2 &amp;lt;label for=&amp;#34;fullname&amp;#34;&amp;gt;Full Name:&amp;lt;/label&amp;gt; 3 &amp;lt;input name=&amp;#34;fullname&amp;#34; /&amp;gt; 4 &amp;lt;button&amp;gt;Add!</description></item><item><title>React Events</title><link>https://g-savitha.github.io/notes/ch-05-react-events/</link><pubDate>Tue, 25 Aug 2020 14:55:24 +0530</pubDate><guid>https://g-savitha.github.io/notes/ch-05-react-events/</guid><description>Note: These notes are taken from Colt steele&amp;rsquo;s Modern React Bootcamp course
React Events Review Commonly used React Events You can attach event handlers to HTML elements in React via special reserved attributes. (You can do this in vanilla JS too, though the syntax is a bit different.)
Event Attributes Any event you can listen for in JS, you can listen for in React.
Examples:
Mouse events: onClick, onMouseOver, etc Form events: onSubmit, etc Keyboard events: onKeyDown, onKeyUp, onKeyPress Full list Example: WiseSquare.</description></item><item><title>React State Patterns</title><link>https://g-savitha.github.io/notes/ch-04-react-state-patterns/</link><pubDate>Mon, 24 Aug 2020 15:52:45 +0530</pubDate><guid>https://g-savitha.github.io/notes/ch-04-react-state-patterns/</guid><description>Note: These notes are taken from Colt steele&amp;rsquo;s Modern React Bootcamp course
Setting State Using State We know that setState() is asynchronous…
So: it’s risky to assume previous call has finished when you call it. Also, React will sometimes batch (squash together) calls to setState together into one for performance reasons. If a call to setState() depends on current state, the safest thing is to use the alternate “callback form”.</description></item><item><title>Intro to State</title><link>https://g-savitha.github.io/notes/ch-03-intro-to-state/</link><pubDate>Mon, 24 Aug 2020 14:57:47 +0530</pubDate><guid>https://g-savitha.github.io/notes/ch-03-intro-to-state/</guid><description>Note: These notes are taken from Colt steele&amp;rsquo;s Modern React Bootcamp course
What is State? Thinking about state In any sufficiently advanced web application, the user interface has to be stateful.
logged-in users see a different screen than logged-out users clicking “edit profile” opens up a modal (pop-up) window sections of a website can expand or collapse, for instance clicking “read more” The state of the client interface (frontend) is not always directly tied to state on the server.</description></item><item><title>CRA and Modules</title><link>https://g-savitha.github.io/notes/ch-02-cra-modules/</link><pubDate>Mon, 24 Aug 2020 13:23:51 +0530</pubDate><guid>https://g-savitha.github.io/notes/ch-02-cra-modules/</guid><description>Note: These notes are taken from Colt steele&amp;rsquo;s Modern React Bootcamp course
Create react App React is a front-end library — you don’t need server-side stuff. You can get react.js and react-dom.js from a CDN. You can transpile JSX in the browser at runtime. But there’s a better way!
Create-React-App is a utility script that:
Creates a skeleton react project Sets it up so that JS files are run through Babel automatically.</description></item><item><title>Intro to React</title><link>https://g-savitha.github.io/notes/ch-01-intro-to-react/</link><pubDate>Mon, 24 Aug 2020 12:28:38 +0530</pubDate><guid>https://g-savitha.github.io/notes/ch-01-intro-to-react/</guid><description>Note: These notes are taken from Colt steele&amp;rsquo;s Modern React Bootcamp course
Popular, powerful front-end framework.
Developed by and sponsored by Facebook.
Make it easy to make reusable view components These encapsulate logic and HTML into a class Often make it easier to build modular applications Components :
The building blocks of React Pieces of UI &amp;amp; view logic Classes that know how to render themselves into HTML A bit like this&amp;hellip;</description></item></channel></rss>