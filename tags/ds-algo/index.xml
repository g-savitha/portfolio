<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ds-algo on Savitha's Notes</title><link>https://g-savitha.github.io/tags/ds-algo/</link><description>Recent content in ds-algo on Savitha's Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 15 Jan 2021 13:02:06 +0530</lastBuildDate><atom:link href="https://g-savitha.github.io/tags/ds-algo/index.xml" rel="self" type="application/rss+xml"/><item><title>Problems on Math</title><link>https://g-savitha.github.io/notes/ch-05-math-problems/</link><pubDate>Fri, 15 Jan 2021 13:02:06 +0530</pubDate><guid>https://g-savitha.github.io/notes/ch-05-math-problems/</guid><description>Find number of digits in a number Given an integral number N. The task is to find the count of digits present in this number. Lets say n = 2020, number of digits in 2020 = 4 and digits are 2,0,2,0
A simple solution is..
Check if number n != 0 increment count of digits by 1 if n !=0 reduce number by dividing it with 10 repeat above steps, until n is reduced to 0 1//iterative 2int countDigits(long n){ 3 int count = 0; 4 while(n &amp;gt; 0){ 5 n = n/10; 6 ++count; 7 } 8 return count; 9} // TC: O(digitsCount), SC: O(1) 10 11//recursive 12int countDigits(long n){ 13 if(n==0) return 1; 14 return 1+ countDigits(n/10); 15} // TC: O(digitsCount), SC: O(digitsCount) Another approach :</description></item><item><title>Factorial</title><link>https://g-savitha.github.io/notes/ch-04-factorial/</link><pubDate>Wed, 02 Sep 2020 16:05:24 +0530</pubDate><guid>https://g-savitha.github.io/notes/ch-04-factorial/</guid><description>Factorial Factorial of a positive integer n, denoted by n! is the product of all positive integers &amp;lt;= n Find factorial of a given number, where n&amp;gt;=0
Ip: n = 4 Op: 24, Ip: n= 6 Op:720 Ip: n=0 Op: 1 Iterative solution:
1int fact(int n){ 2 int res = 1; 3 for(int i = 2; i&amp;lt;=n;i++){ 4 res=res*i; 5 } 6 return res; 7} //TC: O(n), SC: O(1) Recursive solution:</description></item><item><title>GCD</title><link>https://g-savitha.github.io/notes/ch-03-gcd/</link><pubDate>Wed, 02 Sep 2020 16:05:07 +0530</pubDate><guid>https://g-savitha.github.io/notes/ch-03-gcd/</guid><description>LCM and HCF Factors and multiples: All numbers that divide a number completely, i.e., without leaving any remainder, are called factors of that number. For example, 24 is completely divisible by 1, 2, 3, 4, 6, 8, 12, 24. Each of these numbers is called a factor of 24 and 24 is called a multiple of each of these numbers. HCF or GCD : The largest number that divides two or more numbers is the highest common factor (HCF) for those numbers.</description></item><item><title>Prime Numbers</title><link>https://g-savitha.github.io/notes/ch-02-prime-num/</link><pubDate>Wed, 02 Sep 2020 16:04:56 +0530</pubDate><guid>https://g-savitha.github.io/notes/ch-02-prime-num/</guid><description>Numbers &amp;gt; 0 which are divisible by 1 and itself. Example: 2,3,5,7,11..
Facts about prime numbers: Every prime number can be represented in form of (6n+1) and (6n-1) except 2 and 3, when n &amp;gt; 0. 5 : (6 * 1 ) -1, 29: (6 * 5) - 1 2 and 3 are only two consecutive natural numbers, which are prime too. 1 is neither prime nor composite.</description></item><item><title>Basic Math Theory</title><link>https://g-savitha.github.io/notes/ch-01-basic-math/</link><pubDate>Wed, 02 Sep 2020 16:04:36 +0530</pubDate><guid>https://g-savitha.github.io/notes/ch-01-basic-math/</guid><description>Progressions Arithmetic Progression : A sequence of numbers is said to be in an Arithmetic progression if the difference between any two consecutive terms is always the same. 2, 4, 6, 8, 10 is an AP series because they have a common difference (4-2=6-4=8-6=10-8)
Few facts about AP Initial Term (a): first number in the series Common difference (d): The value by which consecutive terms increase or decrease The behavior of the AP depends on the common difference d.</description></item><item><title>Recursion</title><link>https://g-savitha.github.io/notes/recursion/</link><pubDate>Sun, 23 Aug 2020 17:17:32 +0530</pubDate><guid>https://g-savitha.github.io/notes/recursion/</guid><description>Intro to recursion What is recursion?
Recursion : A function calling itself directly or indirectly.
Directly:
1void fun1(){ 2 //somecode ... 3 fun1(); 4 //some other code... 5} Indirectly: Not a very common approach (Mostly direct recursive approach is used)
fun1() -&amp;gt; fun2() -&amp;gt; fun1()
1void fun1(){ 2 //somecode ... 3 fun2(); 4 //some other code... 5} 6void fun2(){ 7 //somecode ... 8 fun1(); 9 //some other code... 10} 11 12 If you dont add a base case, recursion never stops and we might end up with stackoverflow(in case of java) or segmentation fault error(in case of cpp).</description></item></channel></rss>